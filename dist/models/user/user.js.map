{"version":3,"file":"user.js","sourceRoot":"/","sources":["models/user/user.ts"],"names":[],"mappings":";;;;AAAA,uCAAwD;AAExD,4DAA4B;AAEf,QAAA,YAAY,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,UAAU,CAAC,CAAC;AAErG,MAAM,UAAU,GAAG,IAAI,iBAAM,CAC3B;IACE,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;IAC1B,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;IACvB,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;CAC3B,EAAC;IACA,UAAU,EAAE,IAAI;CACjB,CACF,CAAC;AAEF,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,UAAgB,IAAI;;QACzC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;YAAE,OAAO,IAAI,EAAE,CAAC;QAChD,IAAI;YACF,MAAM,IAAI,GAAG,MAAM,gBAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACtC,MAAM,IAAI,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACpD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,EAAE,CAAC;SACR;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,GAAoB,CAAC,CAAC;SAC5B;IACH,CAAC;CAAA,CAAC,CAAC;AAEH,UAAU,CAAC,OAAO,CAAC,gBAAgB,GAAG,UAAgB,IAAY;;QAChE,OAAO,gBAAM,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;CAAA,CAAC;AAEF,MAAM,IAAI,GAAG,IAAA,gBAAK,EAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAEvC,kBAAe,IAAI,CAAC","sourcesContent":["import { Schema, model, CallbackError } from 'mongoose';\nimport { IUserDocument } from '../../types/user/user';\nimport bcrypt from 'bcrypt';\n\nexport const privateField = ['password', '__v', 'verificationCode', 'passwordResetCode', 'verified'];\n\nconst userSchema = new Schema<IUserDocument>(\n  {\n    username: { type: String },\n    email: { type: String },\n    password: { type: String }\n  },{\n    timestamps: true,\n  }\n);\n\nuserSchema.pre('save', async function (next) {\n  if (!this.isModified('password')) return next();\n  try {\n    const salt = await bcrypt.genSalt(10);\n    const hash = await bcrypt.hash(this.password, salt);\n    this.password = hash;\n    next();\n  } catch (err) {\n    next(err as CallbackError);\n  }\n});\n\nuserSchema.methods.validatePassword = async function (pass: string) {\n  return bcrypt.compare(pass, this.password);\n};\n\nconst User = model('User', userSchema);\n\nexport default User;\n"]}